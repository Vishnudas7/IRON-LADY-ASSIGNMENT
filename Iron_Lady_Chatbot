<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iron Lady Leadership Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #1f2937;
        }

        .chat-container {
            max-width: 768px;
            height: calc(100vh - 120px);
            margin: auto;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            background-color: #ffffff;
            border-radius: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        .chat-header {
            background-color: #1f2937;
            color: #f3f4f6;
            padding: 1.5rem;
            text-align: center;
            border-top-left-radius: 1.5rem;
            border-top-right-radius: 1.5rem;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .chat-messages {
            flex-grow: 1;
            padding: 1.5rem;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        .message-bubble {
            max-width: 80%;
            padding: 0.75rem 1.25rem;
            border-radius: 1.5rem;
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
            line-height: 1.5;
            word-wrap: break-word;
        }

        .bot-message {
            background-color: #e5e7eb;
            color: #374151;
            align-self: flex-start;
            border-bottom-left-radius: 0.25rem;
            animation: fadeIn 0.3s ease-out;
        }

        .user-message {
            background-color: #6366f1;
            color: #ffffff;
            align-self: flex-end;
            border-bottom-right-radius: 0.25rem;
            animation: fadeIn 0.3s ease-out;
        }

        .message-row {
            display: flex;
            width: 100%;
            justify-content: flex-end;
        }

        .bot-message-row {
            justify-content: flex-start;
        }
        
        .chat-input-container {
            background-color: #ffffff;
            padding: 1.5rem;
            border-top: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            border-bottom-left-radius: 1.5rem;
            border-bottom-right-radius: 1.5rem;
            gap: 1rem;
        }

        .chat-input {
            flex-grow: 1;
            padding: 0.75rem 1.25rem;
            border-radius: 9999px;
            border: 1px solid #d1d5db;
            outline: none;
            transition: border-color 0.2s;
        }

        .chat-input:focus {
            border-color: #6366f1;
        }

        .chat-button {
            padding: 0.75rem 1.5rem;
            background-color: #6366f1;
            color: #ffffff;
            border-radius: 9999px;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
        }

        .chat-button:hover {
            background-color: #4f46e5;
        }

        .chat-button:active {
            transform: scale(0.95);
        }

        .loading-dots {
            display: inline-flex;
            gap: 0.25rem;
            align-items: center;
        }

        .loading-dot {
            width: 0.5rem;
            height: 0.5rem;
            background-color: #9ca3af;
            border-radius: 50%;
            animation: dot-bounce 1.4s ease-in-out infinite;
        }
        .loading-dot:nth-child(2) { animation-delay: 0.2s; }
        .loading-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes dot-bounce {
            0%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-0.5rem); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(0.5rem); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .chat-container {
                height: 100vh;
                border-radius: 0;
            }
            .chat-header {
                border-radius: 0;
            }
        }

        .quick-questions-container {
            padding: 0 1.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            justify-content: center;
            margin-top: 1rem;
        }
        .quick-question-button {
            padding: 0.5rem 1rem;
            background-color: #e5e7eb;
            color: #374151;
            border-radius: 9999px;
            border: 1px solid #d1d5db;
            cursor: pointer;
            font-size: 0.8rem;
        }
    </style>
</head>
<body>

<div class="chat-container mx-auto mt-8">
    <div class="chat-header">
        <h1 class="text-2xl font-bold">Iron Lady Leadership Chatbot</h1>
        <p class="text-sm mt-1 opacity-75">Ask me anything about our programs!</p>
        <p id="userIdDisplay" class="text-xs mt-1 text-center font-mono break-all"></p>
    </div>

    <div class="chat-messages flex flex-col items-start" id="chatMessages">
        <!-- Messages will be injected here by JavaScript -->
        <div class="message-row bot-message-row">
            <div class="message-bubble bot-message">
                Hello! I'm the Iron Lady Leadership Academy assistant. What would you like to know?
            </div>
        </div>
    </div>

    <div class="chat-input-container flex-col">
        <div class="flex w-full gap-4">
            <input type="text" id="chatInput" placeholder="Type your message..." class="chat-input">
            <button id="sendButton" class="chat-button">Send</button>
        </div>
        <div class="quick-questions-container">
            <button class="quick-question-button" data-question="What programs do you offer?">What programs do you offer?</button>
            <button class="quick-question-button" data-question="Who are the mentors?">Who are the mentors?</button>
            <button class="quick-question-button" data-question="Are certificates provided?">Are certificates provided?</button>
        </div>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    setLogLevel('debug');

    // Global variables for Firebase configuration
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    const apiKey = ""; // This is automatically populated by the environment

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);
    let userId = null;

    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');
    const chatMessages = document.getElementById('chatMessages');
    const userIdDisplay = document.getElementById('userIdDisplay');
    const quickQuestionButtons = document.querySelectorAll('.quick-question-button');

    // Function to add a message to the UI
    const addMessageToUI = (message, sender) => {
        const messageRow = document.createElement('div');
        messageRow.className = `message-row ${sender === 'user' ? '' : 'bot-message-row'}`;
        
        const messageBubble = document.createElement('div');
        messageBubble.className = `message-bubble ${sender === 'user' ? 'user-message' : 'bot-message'}`;
        messageBubble.innerText = message;
        messageRow.appendChild(messageBubble);

        chatMessages.appendChild(messageRow);
        chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll to the latest message
    };

    // Show a typing indicator
    const showTypingIndicator = () => {
        const typingMessage = document.createElement('div');
        typingMessage.id = 'typingIndicator';
        typingMessage.className = 'message-row bot-message-row';
        typingMessage.innerHTML = `
            <div class="message-bubble bot-message">
                <div class="loading-dots">
                    <span class="loading-dot"></span>
                    <span class="loading-dot"></span>
                    <span class="loading-dot"></span>
                </div>
            </div>`;
        chatMessages.appendChild(typingMessage);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    };

    const hideTypingIndicator = () => {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    };

    // Handles sending messages
    const sendMessage = async (messageText) => {
        if (!messageText) {
            const inputValue = chatInput.value.trim();
            if (inputValue === '') return;
            messageText = inputValue;
        }

        chatInput.value = '';
        addMessageToUI(messageText, 'user');

        try {
            await addDoc(collection(db, `artifacts/${appId}/users/${userId}/messages`), {
                text: messageText,
                sender: 'user',
                timestamp: serverTimestamp()
            });

            showTypingIndicator();
            await getBotResponse(messageText);

        } catch (error) {
            hideTypingIndicator();
            console.error("Error sending message or getting bot response:", error);
            addMessageToUI("Sorry, there was an error. Please try again later.", 'bot');
        }
    };

    // AI API call with exponential backoff
    const getBotResponse = async (userMessage) => {
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
        
        const systemPrompt = `You are a helpful and professional chatbot for "Iron Lady's Leadership Academy". Your goal is to provide detailed, friendly, and conversational answers to user questions about our programs.

        **Knowledge Base:**
        - **Programs:** "Iron Lady offers two primary programs: the 'Empowerment Leadership Program' and the 'Strategic Innovators Program'. The Empowerment program is for aspiring leaders and focuses on foundational skills, while the Strategic Innovators program is for experienced professionals and covers advanced topics like change management and innovation."
        - **Duration:** "The Empowerment Leadership Program is a 6-week intensive course designed to build skills quickly. The Strategic Innovators Program is a more comprehensive 12-week advanced course to allow for a deeper dive into complex leadership topics."
        - **Format:** "All of our programs are conducted entirely online. You can access all course materials, lectures, and interactive sessions through our state-of-the-art virtual learning platform from anywhere in the world."
        - **Certificates:** "Yes, upon successfully completing a program and all its requirements, participants are awarded a certified digital certificate. This certificate is a great way to showcase your new skills to potential employers or on your professional network."
        - **Mentors:** "Our team of mentors and coaches is made up of a diverse group of industry veterans and renowned leadership experts. Each mentor has over a decade of hands-on experience in their respective fields, offering invaluable, real-world insights to our students."

        **Instructions:**
        1. Identify the user's query and provide a conversational, detailed answer based on your knowledge base.
        2. Combine and elaborate on the information from your knowledge base to sound more human-like.
        3. If you don't know the answer, politely state that you can only answer questions about the programs, duration, format, certificates, and mentors.
        4. Do not mention that you are an AI or bot.`;
        
        const payload = {
            contents: [{ parts: [{ text: userMessage }] }],
            systemInstruction: {
                parts: [{ text: systemPrompt }]
            }
        };

        const maxRetries = 5;
        let retryCount = 0;
        let delay = 1000;

        while (retryCount < maxRetries) {
            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                const content = result.candidates?.[0]?.content?.parts?.[0]?.text;
                
                if (!content) {
                    throw new Error("API response is empty or malformed.");
                }
                
                hideTypingIndicator();

                await addDoc(collection(db, `artifacts/${appId}/users/${userId}/messages`), {
                    text: content,
                    sender: 'bot',
                    timestamp: serverTimestamp()
                });
                return;
                
            } catch (error) {
                console.error(`Attempt ${retryCount + 1} failed:`, error);
                retryCount++;
                if (retryCount < maxRetries) {
                    await new Promise(res => setTimeout(res, delay));
                    delay *= 2;
                } else {
                    hideTypingIndicator();
                    console.error("Failed to get a response after multiple retries.");
                    addMessageToUI("Sorry, I'm having trouble connecting right now. Please try again later.", 'bot');
                }
            }
        }
    };

    // Firebase Authentication and Firestore listener setup
    onAuthStateChanged(auth, async (user) => {
        if (user) {
            userId = user.uid;
        } else {
            if (initialAuthToken) {
                try {
                    await signInWithCustomToken(auth, initialAuthToken);
                    userId = auth.currentUser.uid;
                } catch (error) {
                    console.error("Firebase custom auth failed:", error);
                    await signInAnonymously(auth);
                    userId = auth.currentUser.uid;
                }
            } else {
                await signInAnonymously(auth);
                userId = auth.currentUser.uid;
            }
        }
        userIdDisplay.innerText = `User ID: ${userId}`;
        console.log("Firebase user ID:", userId);

        const q = query(collection(db, `artifacts/${appId}/users/${userId}/messages`), orderBy("timestamp"));
        onSnapshot(q, (querySnapshot) => {
            chatMessages.innerHTML = `
                <div class="message-row bot-message-row">
                    <div class="message-bubble bot-message">
                        Hello! I'm the Iron Lady Leadership Academy assistant. What would you like to know?
                    </div>
                </div>`;
            querySnapshot.forEach((doc) => {
                const message = doc.data();
                addMessageToUI(message.text, message.sender);
            });
        });
    });

    // Event listeners
    sendButton.addEventListener('click', () => sendMessage(null));
    chatInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            sendMessage(null);
        }
    });

    quickQuestionButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const question = e.target.dataset.question;
            sendMessage(question);
        });
    });

</script>

</body>
</html>
